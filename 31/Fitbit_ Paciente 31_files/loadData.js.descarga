function formatHour(date) {
    return `0${date.getHours()}`.slice(-2);
}

function formatDate(date) {
    return new Date(date.slice(0, -6));
}

function formatBigInt(number) {
    return numeral(number).format("0,0").replace(",", ".")
}

function formatFloat(number) {
    return numeral(number).format("0.00").replace(".", ",")
}

function createDayTitle(data, id) {
    const days = 'Lunes;Martes;Miércoles;Jueves;Viernes;Sábado;Domingo'.split(';');
    const months = 'Enero;Febrero;Marzo;Abril;Mayo;Junio;Julio;Agosto;Septiembre;Octubre;Noviembre;Diciembre'.split(';');
    
    const section = d3.select(id);
    const date = formatDate(data[0].ts);

    section.select(".weekday").text(days[date.getDay()]);
    section.select(".dateSet").text(`${date.getDate()} ${months[date.getMonth()]}`);
}

function createArcChart(percentage, svg) {
    const radio = 81 / 2;

    const arc = d3.arc()
        .innerRadius(radio)
        .outerRadius(radio)
        .startAngle(Math.PI)
        .endAngle(Math.PI + 2 * Math.PI * percentage / 100);

    svg.append("circle")
        .attr('cx', '50%')
        .attr('cy', '50%')
        .attr("r", radio)
        .attr("fill", "none")
        .attr("stroke", "#F0F0F0")
        .attr("stroke-width", 4);

    svg.append("path")
        .attr("class", "arc")
        .attr("transform", `translate(${radio + 5.5},${radio + 5.5})`)
        .attr("d", arc)
        .attr("stroke", "url(#highcharts)")
        .attr("stroke-width", 11)
        .attr("stroke-linejoin", "round");
    
    svg.append("circle")
        .attr('cx', 46)
        .attr('cy', 86.5)
        .attr("r", 3)
        .attr("fill", "black")
        .attr("fill-opacity", 0.25);
}

function createBigArcChart(percentage, svg) {
    const radio = 128 / 2;

    const arc = d3.arc()
        .innerRadius(radio)
        .outerRadius(radio)
        .startAngle(Math.PI)
        .endAngle(Math.PI + 2 * Math.PI * percentage / 100);

    svg.append("circle")
        .attr('cx', '50%')
        .attr('cy', '50%')
        .attr("r", radio)
        .attr("fill", "none")
        .attr("stroke", "#F0F0F0")
        .attr("stroke-width", 4);

    svg.append("path")
        .attr("class", "arc")
        .attr("transform", `translate(${radio + 8},${radio + 8})`)
        .attr("d", arc)
        .attr("stroke", "url(#highcharts)")
        .attr("stroke-width", 16)
        .attr("stroke-linejoin", "round");
    
    svg.append("circle")
        .attr('cx', 72)
        .attr('cy', 136)
        .attr("r", 4.5)
        .attr("fill", "black")
        .attr("fill-opacity", 0.25);
}

function createBarChart(data, svg, qTicks) {
    const margin = { top: 20, bottom: 29, left: 60, right: 0 };
    const width = 455;
    const height = svg.attr("height") - margin.bottom - margin.top;
    const maxValue = qTicks[qTicks.length - 1];

    const dateStart = formatDate(data[0].timestamp).setHours(0, 0, 0, 0);
    const dateEnd = new Date(dateStart);
    dateEnd.setDate(dateEnd.getDate() + 1);

    const xScale = d3.scaleTime().range([0, width]).domain([dateStart, dateEnd]);
    const yScale = d3.scaleLinear().range([0, height]).domain([maxValue, 0]);

    const xAxis = d3.axisBottom(xScale).ticks(d3.timeHour.every(2));
    const yAxis = d3.axisLeft(yScale).tickValues(qTicks);

    svg.append("g")
        .attr("transform", `translate(${margin.left}, ${margin.top})`)
        .selectAll("line")
        .data(qTicks)
        .enter()
        .append("line")
            .attr("x1", (d) => d != 0 ? 0 : -60)
            .attr("x2", width + 40)
            .attr("y1", (d) => yScale(d))
            .attr("y2", (d) => yScale(d))
            .attr("stroke", (d) => d != 0 ? "#F0F0F0" : "#c0d0e0")
            .attr("stroke-width", (d) => d != 0 ? 1 : 2);

    svg.append("g")
        .attr("id", "horizontal-axis")
        .attr("transform", `translate(${margin.left}, ${height + margin.top})`)
        .call(xAxis.tickFormat(formatHour));

    svg.append("g")
        .attr("id", "vertical-axis")
        .attr("transform", `translate(45, ${margin.top})`)
        .call(yAxis);

    svg.append("g")
        .attr("transform", `translate(${margin.left}, ${margin.top})`)
        .selectAll(".bar")
        .data(data)
        .enter()
        .append("rect")
            .attr("class", "bar")
            .attr("x", (d) => xScale(formatDate(d.timestamp)))
            .attr("y", (d) => yScale(d.value))
            .attr("width", 4)
            .attr("height", (d) => height - yScale(d.value))
            .attr("fill", "#fec131");
}

function createChartCalorias(data, day) {
    const svg = d3.select(day).select("#chartCalorias");
    const processData = [];

    data.forEach((d) => {
        processData.push({
            timestamp: d.ts,
            value: d.cal,
        })
    });

    createBarChart(processData, svg, [0, 25, 50, 75]);
}

function createChartPasos(data, day) {
    const svg = d3.select(day).select("#chartPasos");
    const processData = [];

    data.forEach((d) => {
        processData.push({
            timestamp: d.ts,
            value: d.steps,
        })
    });

    createBarChart(processData, svg, [0, 500, 1000]);
}

function createChartDistancia(data, day) {
    const svg = d3.select(day).select("#chartDistancia");
    const processData = [];

    data.forEach((d) => {
        processData.push({
            timestamp: d.ts,
            value: d.dist,
        })
    });

    createBarChart(processData, svg, [0, 0.5, 1, 1.5]);
}

function createTotalCalorias(data, day) {
    const total = data.reduce((acc, d) => acc + d.cal, 0);
    const percentage = total / 2794 * 100;

    const div = d3.select(day).select("#calsTotales");
    div.select(".absoluteContainer").select(".number").text(formatBigInt(total));
    div.select(".percentContainer").select(".number").text(Math.round(percentage) + "%");

    const svg = div.select("svg");
    createArcChart(percentage, svg)
}

function createTotalPasos(data, day) {
    const total = data.reduce((acc, d) => acc + d.steps, 0);
    const percentage = total / 10000 * 100;

    const div = d3.select(day).select("#pasosTotales");
    div.select(".absoluteContainer").select(".number").text(formatBigInt(total));
    div.select(".percentContainer").select(".number").text(Math.round(percentage) + "%");

    const svg = div.select("svg");
    createBigArcChart(percentage, svg)
}

function createTotalDistancia(data, day) {
    const total = data.reduce((acc, d) => acc + d.dist, 0);
    const percentage = total / 8.05 * 100;

    const div = d3.select(day).select("#distTotal");
    div.select(".absoluteContainer").select(".number").text(formatFloat(total));
    div.select(".percentContainer").select(".number").text(Math.round(percentage) + "%");

    const svg = div.select("svg");
    createArcChart(percentage, svg)
}

function createSleep(data) {
    const time = data.duration/(60 * 1000)
    const hours = Math.floor(time/60)
    const minutes = Math.floor(time % 60)

    d3.select("#horasSueñoTotal").text(hours);
    d3.select("#minutosSueñoTotal").text(minutes);
    d3.select("#minutosDespierto").text(data.minutesAwake);

    const start = data.startTime.slice(12, 16)
    const end = data.endTime.slice(11, 16)
    
    d3.select("#inicioSueño").text(start);
    d3.select("#terminoSueño").text(end);
}

function createNoSleep() {
    const div = d3.select("#contenedorSueño");
    div.selectAll("*").remove();

    const onboarding = div.append("div").attr("class", "onboarding");
    onboarding.append("div").attr("class", "moon_stars");
    onboarding.append("div").attr("class", "title center larger").text("¿Qué tal has dormido?");
}


async function loadData() {
    const promise_data_1 = d3.json(`../${id_paciente}/data_1.json`);
    const promise_data_2 = d3.json(`../${id_paciente}/data_2.json`);
    const promise_sleep = d3.json(`../${id_paciente}/sleep.json`);

    const [data_1, data_2, sleep] = await Promise.all([promise_data_1, promise_data_2, promise_sleep]);

    for (let i = 1; i < 3; i++) {
        const data = (i == 1) ? data_1 : data_2;
        const day = `#dia${i}`;

        console.log('???', data)

        createDayTitle(data, `#diaCompleto${i}`);

        createChartCalorias(data, day);
        createTotalCalorias(data, day);

        createChartPasos(data, day);
        createTotalPasos(data, day);

        createChartDistancia(data, day);
        createTotalDistancia(data, day);
    }

    if (Object.keys(sleep).length > 0) {
        createSleep(sleep);
    } else {
        createNoSleep();
    }
}

const id_paciente = 31;
document.title = `Fitbit: Paciente ${id_paciente}`;
loadData();
